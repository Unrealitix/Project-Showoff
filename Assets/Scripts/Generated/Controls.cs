//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Generated
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Hover"",
            ""id"": ""19a28e0b-c75d-49bb-86d2-cf02a96cd70e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""df851d02-b690-4c62-8609-72aebe301b35"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Buttons"",
                    ""type"": ""Button"",
                    ""id"": ""49f9d40d-1473-4747-8202-14c6fdebb89a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelaration"",
                    ""type"": ""Value"",
                    ""id"": ""5ce2f942-eb4e-47d0-849d-b67b060af30e"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deacceleration"",
                    ""type"": ""Value"",
                    ""id"": ""7f6d3410-db2c-42d0-a6c4-9bec98d501c9"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dfc2321f-7e78-46f5-b3c9-c6a3a25638a5"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d962fd6-39b3-4f15-828b-e5817e7b26de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d1e4fe93-f49a-43fa-9017-7d33e797df1f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5424728c-a400-488f-a4c5-f1443955147c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""158b3b56-4bf4-49d1-ad58-b75acba87165"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""751c4846-6d38-4cd9-b6b5-7f57211ae7ea"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e03d8c70-589f-42fc-aefd-42245a02167a"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19202e3f-3858-4a27-a747-9e4e00ea0104"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1264dc3f-356d-446d-b02e-404480326202"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8a9a1ff3-622e-48b8-95d7-0b0e366858fe"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0843b7d2-a8ef-4742-835e-9cd008592a86"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Buttons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb027f05-35dc-4c24-aaf8-7535660f24d1"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Buttons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""485dacb6-9ad4-4157-b400-e25fe1aeb543"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Buttons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edc94829-8c8d-43ee-869c-ee403a8ccd98"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Accelaration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97ff0f7b-bc3b-471b-80ad-62de1638c4c3"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Deacceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Hover
            m_Hover = asset.FindActionMap("Hover", throwIfNotFound: true);
            m_Hover_Movement = m_Hover.FindAction("Movement", throwIfNotFound: true);
            m_Hover_Buttons = m_Hover.FindAction("Buttons", throwIfNotFound: true);
            m_Hover_Accelaration = m_Hover.FindAction("Accelaration", throwIfNotFound: true);
            m_Hover_Deacceleration = m_Hover.FindAction("Deacceleration", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Hover
        private readonly InputActionMap m_Hover;
        private List<IHoverActions> m_HoverActionsCallbackInterfaces = new List<IHoverActions>();
        private readonly InputAction m_Hover_Movement;
        private readonly InputAction m_Hover_Buttons;
        private readonly InputAction m_Hover_Accelaration;
        private readonly InputAction m_Hover_Deacceleration;
        public struct HoverActions
        {
            private @Controls m_Wrapper;
            public HoverActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Hover_Movement;
            public InputAction @Buttons => m_Wrapper.m_Hover_Buttons;
            public InputAction @Accelaration => m_Wrapper.m_Hover_Accelaration;
            public InputAction @Deacceleration => m_Wrapper.m_Hover_Deacceleration;
            public InputActionMap Get() { return m_Wrapper.m_Hover; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HoverActions set) { return set.Get(); }
            public void AddCallbacks(IHoverActions instance)
            {
                if (instance == null || m_Wrapper.m_HoverActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HoverActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Buttons.started += instance.OnButtons;
                @Buttons.performed += instance.OnButtons;
                @Buttons.canceled += instance.OnButtons;
                @Accelaration.started += instance.OnAccelaration;
                @Accelaration.performed += instance.OnAccelaration;
                @Accelaration.canceled += instance.OnAccelaration;
                @Deacceleration.started += instance.OnDeacceleration;
                @Deacceleration.performed += instance.OnDeacceleration;
                @Deacceleration.canceled += instance.OnDeacceleration;
            }

            private void UnregisterCallbacks(IHoverActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Buttons.started -= instance.OnButtons;
                @Buttons.performed -= instance.OnButtons;
                @Buttons.canceled -= instance.OnButtons;
                @Accelaration.started -= instance.OnAccelaration;
                @Accelaration.performed -= instance.OnAccelaration;
                @Accelaration.canceled -= instance.OnAccelaration;
                @Deacceleration.started -= instance.OnDeacceleration;
                @Deacceleration.performed -= instance.OnDeacceleration;
                @Deacceleration.canceled -= instance.OnDeacceleration;
            }

            public void RemoveCallbacks(IHoverActions instance)
            {
                if (m_Wrapper.m_HoverActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHoverActions instance)
            {
                foreach (var item in m_Wrapper.m_HoverActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HoverActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public HoverActions @Hover => new HoverActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IHoverActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnButtons(InputAction.CallbackContext context);
            void OnAccelaration(InputAction.CallbackContext context);
            void OnDeacceleration(InputAction.CallbackContext context);
        }
    }
}
